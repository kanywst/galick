name: Galick CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'dev'
      scenario:
        description: 'Scenario to run'
        required: true
        default: 'simple'
      threshold_failure:
        description: 'Fail workflow on threshold violations'
        required: true
        default: true
        type: boolean

jobs:
  get-versions:
    runs-on: ubuntu-latest
    outputs:
      go-version: ${{ steps.extract.outputs.go-version }}
      vegeta-version: ${{ steps.extract.outputs.vegeta-version }}
      golangci-lint-version: ${{ steps.extract.outputs.golangci-lint-version }}
    steps:
      - uses: actions/checkout@v3

      - name: Extract versions from Makefile
        id: extract
        run: |
          echo "go-version=$(grep "GO_VERSION=" Makefile | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "vegeta-version=$(grep "VEGETA_VERSION=" Makefile | cut -d= -f2)" >> $GITHUB_OUTPUT
          echo "golangci-lint-version=$(grep "GOLANGCI_LINT_VERSION=" Makefile | cut -d= -f2)" >> $GITHUB_OUTPUT

  lint-and-test:
    name: Lint and Test
    needs: get-versions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ needs.get-versions.outputs.go-version }}
          cache: true

      - name: Install golangci-lint manually
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin ${{ needs.get-versions.outputs.golangci-lint-version }}
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Run golangci-lint
        run: golangci-lint run ./...

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.txt
          fail_ci_if_error: false

  load-test:
    name: Load Test
    needs: [get-versions, lint-and-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Galick Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          load: true
          tags: galick:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Demo Server Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.demo
          push: false
          load: true
          tags: demo-server:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Docker Images
        run: |
          docker images
          docker run --rm galick:latest version

      - name: Start Demo Server
        if: github.event_name == 'workflow_dispatch' && inputs.environment == 'dev'
        run: |
          docker run -d --name demo-server -p 8080:8080 demo-server:latest
          sleep 2  # Wait for server to start

      - name: Run Load Tests (Manual Trigger)
        if: github.event_name == 'workflow_dispatch'
        run: |
          mkdir -p output
          docker run --network host -v $(pwd)/output:/data/output -e CI=${{ inputs.threshold_failure }} galick:latest run ${{ inputs.scenario }} --env ${{ inputs.environment }}

      - name: Run Load Tests (Automated)
        if: github.event_name != 'workflow_dispatch'
        run: |
          mkdir -p output
          docker run --network host -v $(pwd)/output:/data/output -e CI=true galick:latest run

      - name: Generate HTML Report
        run: |
          docker run --network host -v $(pwd)/output:/data/output galick:latest report --format html

      - name: Stop Demo Server
        if: always() && github.event_name == 'workflow_dispatch' && inputs.environment == 'dev'
        run: |
          docker stop demo-server || true
          docker rm demo-server || true

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: load-test-reports
          path: output/

      - name: Check for Threshold Violations
        run: |
          if grep -q "‚ùå FAILED" output/*/*/report.md; then
            echo "::warning::Threshold violations detected in load test results"
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.threshold_failure }}" == "true" ]] || [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
              echo "::error::Load test thresholds violated"
              exit 1
            fi
          else
            echo "All thresholds passed! üéâ"
          fi
